// 01

    // The inline comment
    /* 
    The
    multiline 
    comment
    */

// 02
    // declare variable
    var myName;

// 03
    // Setup
    var a;

    // Only change code below this line

    // assign the variable a to 7
    a = 7;

// 04
    // Setup
    var a;
    a = 7;
    var b;

    // Only change code below this line
    // assign the value of a to b
    b = a;

// 05   
    // declare variable a and initialize it to 9

    var a = 9;

// 06  -- creating two string variables assigned to value of first and last name of mine
    var myFirstName = "Michael";
    var myLastName = "Chekletsov";

// 07 - initialize variables a,b,c so they won't have value of undefined
    var a;
    var b;
    var c;

    a = a + 1;
    b = b + 5;
    c = c + " String!";

    // Only change code below this line
    var a = 5;
    var b = 10;
    var c = "I'm a";
    // Only change code above this line

    a = a + 1;
    b = b + 5;
    c = c + " String!";

// 08 -- modify declaration names to camelCase
    // Variable declarations
    var StUdLyCapVaR;
    var properCamelCase;
    var TitleCaseOver;

    // Variable assignments
    STUDLYCAPVAR = 10;
    PRoperCAmelCAse = "A String";
    tITLEcASEoVER = 9000;

    // Variable declarations
    var studlyCapVar;
    var properCamelCase;
    var titleCaseOver;

    // Variable assignments
    studlyCapVar = 10;
    properCamelCase = "A String";
    titleCaseOver = 9000;

// 09 -- changing var keyword var to let
    var catName = "Oliver";
    var catSound = "Meow!";
//--
    let catName = "Oliver";
    let catSound = "Meow!";

// 10 -- change keywords var to let and const and rename const to uppercase
    const FCC = "freeCodeCamp"; // Change this line
    let fact = "is cool!"; // Change this line
    fact = "is awesome!";
    console.log(FCC, fact); // Change this line

// 11 -- change number for sum to be equal 20
    const sum = 10 + 0;
    //--
    const sum = 10 + 10;

// 12 -- change number for difference to be equal 12
    const difference = 45 - 0;
    //--
    const difference = 45 - 33;

// 13 -- change number for multiply to be equal 80
    const product = 8 * 0;
    //--
    const product = 8 * 10;

// 14 -- change number for divide to be equal 2
    const quotient = 66 / 0;
    //--
    const quotient = 66 / 33;

// 15 using the increment
    let myVar = 87;

    // Only change code below this line
    myVar = myVar + 1;
    //--
    let myVar = 87;

    // Only change code below this line
    myVar++;

// 16 using the decrement
    let myVar = 11;

    // Only change code below this line
    myVar = myVar - 1;
    //--
    let myVar = 11;

    // Only change code below this line
    myVar--;

// 17 create variable with float value
    const ourDecimal = 5.7;

    // Only change code below this line
    let myDecimal = 5.7;

// 18 correct data for result to be 5.0
const product = 2.0 * 0.0;
//--
const product = 2.0 * 2.5;

// 19 -- usage the +=
let a = 3;
let b = 17;
let c = 12;

// Only change code below this line
a = a + 12;
b = 9 + b;
c = c + 7;
//--
let a = 3;
let b = 17;
let c = 12;

// Only change code below this line
a += 12;
b += 9;
c += 7;

// 20 -- using backslash to escape quotes
const myStr = "I am a \"double quoted\" string inside \"double quotes\"."; // Change this line

// 21 -- Concatinate strings
let myStr = "This is the first sentence.";
myStr += " This is the second sentence.";


// 22 creating a MadLibs-style sentence
    const myNoun = "dog";
    const myAdjective = "big";
    const myVerb = "ran";
    const myAdverb = "quickly";

    // Only change code below this line
    const wordBlanks = "My " + myNoun + " seen the "
    + myAdjective + " ball falling nearby and " + myVerb
    + " to get it " + myAdverb; // Change this line
    // Only change code above this line

// 23 create if statement 
    function trueOrFalse(wasThatTrue) {
        if(wasThatTrue) return "Yes, that was true" 
        else return "No, that was false"
        // Only change code above this line
    }

// 24 the golf game
/*
In the game of golf, each hole has a par, 
meaning, the average number of strokes a golfer is expected to make in order to sink the ball in the hole 
to complete the play. Depending on how far above or below par your strokes are, there is a different nickname.

Your function will be passed par and strokes arguments. 
Return the correct string according to this table which lists the strokes in order of priority; 
top (highest) to bottom (lowest):
*/

    const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];

    function golfScore(par, strokes) {
    // Only change code below this line
    if(strokes == 1) {return names[0]}
    else if(strokes-par <= -2) {return names[1]}
    else if(strokes-par == -1) {return names[2]}
    else if(strokes-par == 0) {return names[3]}
    else if(strokes-par == 1) {return names[4]}
    else if(strokes-par == 2) {return names[5]}
    else return names[6];
    // Only change code above this line
    }

    golfScore(5, 4);

// 25 
/* Counting Cards
In the casino game Blackjack, a player can gain an advantage over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called Card Counting.

Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.

Count Change	Cards
+1	2, 3, 4, 5, 6
0	7, 8, 9
-1	10, 'J', 'Q', 'K', 'A'
You will write a card counting function. It will receive a card parameter, which can be a number or a string, and increment or decrement the global count variable according to the card's value (see table). The function will then return a string with the current count and the string Bet if the count is positive, or Hold if the count is zero or negative. The current count and the player's decision (Bet or Hold) should be separated by a single space.

Example Outputs: -3 Hold or 5 Bet
*/
let count = 0;

function cc(card) {
  switch(card){
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count++;
      break;
    case 7:
    case 8:
    case 9:
      break;
    case 10:
    case 'J':
    case 'Q':
    case 'K':
    case 'A':
      count--;
      break;   
  }
  if (count > 0 ) return count+" Bet";
  else return count+" Hold";
}

cc(2); cc(3); cc(7); cc('K'); cc('A');

// 26
/*Record Collection
You are given an object literal representing a part of your musical album collection. Each album has a unique id number as its key and several other properties. Not all albums have complete information.

You start with an updateRecords function that takes an object literal, records, containing the musical album collection, an id, a prop (like artist or tracks), and a value. Complete the function using the rules below to modify the object passed to the function.

Your function must always return the entire record collection object.
If prop isn't tracks and value isn't an empty string, update or set that album's prop to value.
If prop is tracks but the album doesn't have a tracks property, create an empty array and add value to it.
If prop is tracks and value isn't an empty string, add value to the end of the album's existing tracks array.
If value is an empty string, delete the given prop property from the album.
*/
// Setup
const recordCollection = {
    2548: {
      albumTitle: 'Slippery When Wet',
      artist: 'Bon Jovi',
      tracks: ['Let It Rock', 'You Give Love a Bad Name']
    },
    2468: {
      albumTitle: '1999',
      artist: 'Prince',
      tracks: ['1999', 'Little Red Corvette']
    },
    1245: {
      artist: 'Robert Palmer',
      tracks: []
    },
    5439: {
      albumTitle: 'ABBA Gold'
    }
  };
  
  // Only change code below this line
  function updateRecords(records, id, prop, value) {
    if(prop != "tracks" && value){
      records[id][prop] = value;
    }
    if(prop == "tracks" && records[id].hasOwnProperty("tracks") && value){
      records[id][prop].push(value);
    }else if(prop == "tracks" && !records[id].hasOwnProperty("tracks") && value){
      records[id][prop] = [value];
    }
    if(value === ""){
      delete records[id][prop];
    }
    return records;
  }
  
  updateRecords(recordCollection, 5439, 'artist', 'ABBA');

// 27 
/*
Profile Lookup
We have an array of objects representing different people in our contacts lists.

A lookUpProfile function that takes name and a property (prop) as arguments has been pre-written for you.

The function should check if name is an actual contact's firstName and the given property (prop) is a property of that contact.

If both are true, then return the "value" of that property.

If name does not correspond to any contacts then return the string No such contact.

If prop does not correspond to any valid properties of a contact found to match name then return the string No such property.
*/
// Setup
const contacts = [
    {
      firstName: "Akira",
      lastName: "Laine",
      number: "0543236543",
      likes: ["Pizza", "Coding", "Brownie Points"],
    },
    {
      firstName: "Harry",
      lastName: "Potter",
      number: "0994372684",
      likes: ["Hogwarts", "Magic", "Hagrid"],
    },
    {
      firstName: "Sherlock",
      lastName: "Holmes",
      number: "0487345643",
      likes: ["Intriguing Cases", "Violin"],
    },
    {
      firstName: "Kristian",
      lastName: "Vos",
      number: "unknown",
      likes: ["JavaScript", "Gaming", "Foxes"],
    },
  ];
  
  function lookUpProfile(name, prop) {
    for(let i=0;i<contacts.length;i++){
      if((contacts[i].firstName == name) && contacts[i].hasOwnProperty(prop)){
        return contacts[i][prop];
      }else if((contacts[i].firstName == name) && !contacts[i].hasOwnProperty(prop)) return "No such property";
    }return "No such contact";
  
  }
  
  lookUpProfile("Akira", "likes");

// 28


// 29


// 30


// 31


// 32


// 33 


// 34


// 35


// 36


// 37 


// 38


// 39


// 40


// 41 


// 42


// 43


// 44


// 45 


// 46


// 47 


// 48


// 49


// 50

